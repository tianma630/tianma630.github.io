<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天马行空</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tianma630.com/"/>
  <updated>2021-05-23T17:18:07.063Z</updated>
  <id>http://tianma630.com/</id>
  
  <author>
    <name>tianma630</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一</title>
    <link href="http://tianma630.com/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/%E4%B8%80/"/>
    <id>http://tianma630.com/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/%E4%B8%80/</id>
    <published>2021-05-23T17:04:31.000Z</published>
    <updated>2021-05-23T17:18:07.063Z</updated>
    
    <content type="html"><![CDATA[<p>一天晚上，我姐给我发了一堆微信，大概意思是给我介绍了个对象，长得挺漂亮，学历很高，工作很好，让我抓紧点，一把年纪了；我敷衍着答应了。</p><p>第二天八点多到公司后，用手机号在微信上搜了一下，微信名里有个‘bao’，我想应该就是了，就发送了好友请求。过了一会微信显示好友提过了，我发了句：“hi你好”，“你好”她恢复到。我问：“上班了吗”；“上班了，我们九点上班”她又恢复到。我看已经九点了，就没有再发消息了。</p><a id="more"></a><p>晚上下班到家后，我拿起主机联系了对方，她挺热情友好的介绍了她的工作、学校以及到杭州的经历，过程比较轻松愉快友好；感觉还不错，沟通的挺顺畅的，有个不错的印象。</p><p>第二天下班后，我问她：“平常有什么爱好吗？”，过了许久，她回复到：“看书 地球 刷剧 (还有一个忘了，好像是旅行)”。她可能有事在忙，我突然有点语塞，不知如何回复，就匆匆结算了。</p><p>过了2天，快到周末了，我想要不约下一起见个面吃个饭。交付交换了一下时间地点，顺利的确定了。</p><p>大概提前了十几分钟，我到达了吃饭地点，找了个角落的位置；过了10几分钟，她匆匆的过来了，穿着羽绒服，个子小小的，披散这头发，摘了口罩后，相视一笑，气氛略显尴尬。幸好服务员来上菜了，边吃边问一些有的没的家长里短的话，气氛稍显缓和。在灯光的映衬下，她带着笑容，说话不紧不慢，语气平缓，如同一位老师再将一个故事娓娓道来，我听得津津有味，不时笑着点头附和。时间流逝，不知不觉8点多了，吃的也差不多了，就一起买单下楼了，我问：“要不要送你回家？”；“不用了，我家离的不远，我坐车几站就到了”，她回复到。第一次见面，也还不是很熟，也不好勉强，不然返回生厌，就没有多说，说了再见后就开车回家了。到家后，礼貌性的问她：“到家没”；“骑车回去的，10几分钟就到了”，她说道。“下次还能再约一起吗”，我又问；过了一会，她回复到“可以啊(带个笑脸)”；我回复以笑脸。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一天晚上，我姐给我发了一堆微信，大概意思是给我介绍了个对象，长得挺漂亮，学历很高，工作很好，让我抓紧点，一把年纪了；我敷衍着答应了。&lt;/p&gt;
&lt;p&gt;第二天八点多到公司后，用手机号在微信上搜了一下，微信名里有个‘bao’，我想应该就是了，就发送了好友请求。过了一会微信显示好友提过了，我发了句：“hi你好”，“你好”她恢复到。我问：“上班了吗”；“上班了，我们九点上班”她又恢复到。我看已经九点了，就没有再发消息了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活日记" scheme="http://tianma630.com/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>如何提升代码质量?</title>
    <link href="http://tianma630.com/%E7%BC%96%E7%A8%8B/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/"/>
    <id>http://tianma630.com/%E7%BC%96%E7%A8%8B/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/</id>
    <published>2020-08-01T05:10:19.000Z</published>
    <updated>2020-08-01T05:17:35.002Z</updated>
    
    <content type="html"><![CDATA[<p>下面是公司项目中的一些可以优化的代码</p><h2 id="缓存数据"><a href="#缓存数据" class="headerlink" title="缓存数据"></a>缓存数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 browser 信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getBrowser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ua = <span class="built_in">window</span>.navigator.userAgent || <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">const</span> isAndroid = <span class="regexp">/android/i</span>.test(ua);</span><br><span class="line">  <span class="keyword">const</span> isIos = <span class="regexp">/iphone|ipad|ipod/i</span>.test(ua);</span><br><span class="line">  <span class="keyword">const</span> isWechat = <span class="regexp">/micromessenger\/([\d.]+)/i</span>.test(ua);</span><br><span class="line">  <span class="keyword">const</span> isWeibo = <span class="regexp">/(weibo).*weibo__([\d.]+)/i</span>.test(ua);</span><br><span class="line">  <span class="keyword">const</span> isQQ = <span class="regexp">/qq\/([\d.]+)/i</span>.test(ua);</span><br><span class="line">  <span class="keyword">const</span> isQQBrowser = <span class="regexp">/(qqbrowser)\/([\d.]+)/i</span>.test(ua);</span><br><span class="line">  <span class="keyword">const</span> isQzone = <span class="regexp">/qzone\/.*_qz_([\d.]+)/i</span>.test(ua);</span><br><span class="line">  <span class="comment">// 安卓 chrome 浏览器，很多 app 都是在 chrome 的 ua 上进行扩展的</span></span><br><span class="line">  <span class="keyword">const</span> isOriginalChrome = <span class="regexp">/chrome\/[\d.]+ Mobile Safari\/[\d.]+/i</span>.test(ua) &amp;&amp; isAndroid;</span><br><span class="line">  <span class="comment">// chrome for ios 和 safari 的区别仅仅是将 Version/&lt;VersionNum&gt; 替换成了 CriOS/&lt;ChromeRevision&gt;</span></span><br><span class="line">  <span class="comment">// ios 上很多 app 都包含 safari 标识，但它们都是以自己的 app 标识开头，而不是 Mozilla</span></span><br><span class="line">  <span class="keyword">const</span> isSafari =</span><br><span class="line">    /safari\/([\d.]+)$/i.test(ua) &amp;&amp;</span><br><span class="line">    isIos &amp;&amp;</span><br><span class="line">    ua.indexOf(<span class="string">"Crios"</span>) &lt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">    ua.indexOf(<span class="string">"Mozilla"</span>) === <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    isAndroid,</span><br><span class="line">    isIos,</span><br><span class="line">    isWechat,</span><br><span class="line">    isWeibo,</span><br><span class="line">    isQQ,</span><br><span class="line">    isQQBrowser,</span><br><span class="line">    isQzone,</span><br><span class="line">    isOriginalChrome,</span><br><span class="line">    isSafari</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><em>getBrowser</em> 方法是用于环境信息的方法，获取的方式本身没什么问题，但是有些信息有个特点：是不可变的，多次调用的结果其实是一样的。<br>这种情况，我们其实可以把这些环境信息缓存下来，避免重复获取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> env = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getBrowser();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>就是通过自执行函数，预执行 <em>getBrowser</em> 方法，并将结果缓存在 <em>env</em> 变量中，这样就解决了多次调用重复执行的问题。但是这种方式有个问题：会延长加载脚本的时间，而且有可能自始至终都没用到这些信息，这样也是资源的浪费。<br>我们可以用单例模式的思想做进一步优化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getEvn = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> env;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!env) &#123;</span><br><span class="line">    env = getBrowser(); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> env;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>这样的话，只有第一次执行时会调用 <em>getBrowser</em> 方法，后续调用都是用的第一次缓存的结果。上面的代码其实就是典型的单例模式的抽象实现，<em>getBrowser</em> 方法完全可以替换成其他方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getSingle = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ret;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">            result = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getEnv = getSingle(getBrowser);</span><br></pre></td></tr></table></figure><h2 id="递归的使用"><a href="#递归的使用" class="headerlink" title="递归的使用"></a>递归的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断两个版本</span></span><br><span class="line"><span class="comment"> * 比如：'1.5.5'，'1.5.0'进行比较，返回的是5，前面的版本大于后面5个版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">preV</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">nextV</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> compareVersion = <span class="function">(<span class="params">preV, nextV</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> pvs = preV.split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">const</span> nvs = nextV.split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">const</span> rv = pvs[<span class="number">0</span>] - nvs[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> rv === <span class="number">0</span> &amp;&amp; preV !== nextV</span><br><span class="line">    ? compareVersion(pvs.splice(<span class="number">1</span>).join(<span class="string">"."</span>), nvs.splice(<span class="number">1</span>).join(<span class="string">"."</span>))</span><br><span class="line">    : rv;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的主要是通过递归的方式判断2个版本号的大小。主要有2个问题</p><ol><li>因为在定义 <em>compareVersion</em> 方法是用的字符串作为参数，为了递归调用这个方法，把版本号 <em>split</em> 成数组后，又 <em>join</em> 成了字符串，在每个递归调用中都会重复的 _split、join _。</li><li>很多情况，递归是一种次优的选择，在处理线性的数据结构(数组、队列、单链表等)时，往往是不需要使用递归的，遍历是更优的选择。</li></ol><p>第一个问题很容易解决，只需要把递归方法的参数统一用数组即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compareVersion = <span class="function">(<span class="params">preV, nextV</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> pvs = preV.split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">const</span> nvs = nextV.split(<span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_compare</span>(<span class="params">pvs, nvs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> rv = pvs[<span class="number">0</span>] - nvs[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rv === <span class="number">0</span> &amp;&amp; pvs.length &gt; <span class="number">1</span> &amp;&amp; nvs.length &gt; <span class="number">1</span></span><br><span class="line">    ? _compare(pvs.slice(<span class="number">1</span>), nvs.slice(<span class="number">1</span>))</span><br><span class="line">    : rv;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _compare(pvs, nvs);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>考虑到这个逻辑其实就是2个数组值大小的比对，用遍历可容易实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compareVersion = <span class="function">(<span class="params">preV, nextV</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> pvs = preV.split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">const</span> nvs = nextV.split(<span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ret, i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; pvs.length &amp;&amp; i &lt; nvs.length; i++) &#123;</span><br><span class="line">    ret = pvs[i] - nvs[i];</span><br><span class="line">    <span class="keyword">if</span> (ret !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外举个比较典型的遍历 &gt; 递归的例子就是斐波那契数列 <em>F</em>(n) = <em>F</em>(n - 1) + <em>F</em>(n - 2)。如果用递归去解斐波那契数列，会造成大量的计算冗余，性能很低。<br>当然也可以通过缓存的方式避免重复计算，但是用遍历的方式是更好的选择。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> t1 = <span class="number">0</span>, t2 = <span class="number">1</span>, i = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === n) &#123;</span><br><span class="line">      <span class="keyword">return</span> t1 + t2;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    [t1, t2] = [t2, t1 + t2];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码的组织结构"><a href="#代码的组织结构" class="headerlink" title="代码的组织结构"></a>代码的组织结构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 十进制数字精度转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;待转换数字&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;保留小数位数&#125;</span></span>&#125; decimals</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;是否返回“+”符号&#125;</span> <span class="variable">withSign</span></span></span></span><br><span class="line"><span class="comment"> * 对于null, undefined, NaN均返回0.00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toFixed</span>(<span class="params">num, decimals = <span class="number">2</span>, withSign, isOmitZero</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> number = num;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> decimals !== <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"传入toFixed的decimals参数类型不正确"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num !== <span class="string">"number"</span>) &#123;</span><br><span class="line">    number = <span class="built_in">Number</span>(num);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Number</span>.isNaN(number)) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="number">0</span>).toFixed(decimals);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Number</span>.isNaN(number)) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>).toFixed(decimals);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = number.toFixed(decimals);</span><br><span class="line">  <span class="keyword">if</span> (isOmitZero) &#123;</span><br><span class="line">    result = result.replace(<span class="regexp">/(?:\.0*|(\.\d+?)0+)$/</span>, <span class="string">"$1"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (withSign &amp;&amp; num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    result = <span class="string">`+<span class="subst">$&#123;result&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们要实现一个比较复杂的功能时，我们需要对逻辑进行拆封和排序。以上面的 <em>toFixed</em> 方法为例，它实现的是数据格式化的功能，有4个参数</p><ol><li>num 原始数据</li><li>decimals 几位小数</li><li>withSign 是否带符号</li><li>isOmitZero 是否需要将一些 x == 0 的值格式化为0.00</li></ol><p>因为不同的数据类型格式化的方式是不同的，所以我们可以按数据的类型将这个功能分为3个部分：</p><ol><li>整数的情况</li><li>小数的情况</li><li>x == 0的情况</li></ol><p>尽量将特殊情况判断放在前面，这样可以使后面的分支中少很多的特殊情况判断，提取出可抽象的公共的代码逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toFixed</span>(<span class="params">num, decimals = <span class="number">2</span>, withSign, isOmitZero</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">zs</span>(<span class="params">num, decimal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="string">'.'</span> + <span class="string">'0'</span>.repeat(decimal);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">xs</span>(<span class="params">num, decimal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseFloat</span>((num + <span class="string">'0'</span>.repeat(decimal) + <span class="string">'1'</span>)).toFixed(decimal);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isInt</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(n) == <span class="built_in">parseFloat</span>(n)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isFloat</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(n) &lt; <span class="built_in">parseFloat</span>(n)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ret = num;</span><br><span class="line">  <span class="keyword">if</span> (num == <span class="number">0</span> &amp;&amp; num !== <span class="number">0</span> &amp;&amp; num !== <span class="string">'0'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isOmitZero) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'0.00'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">'string'</span> || <span class="keyword">typeof</span> num === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isInt(num)) &#123;</span><br><span class="line">      ret = zs(num, decimals);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isFloat(num)) &#123;</span><br><span class="line">      ret = xs(num, decimals);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (withSign &amp;&amp; ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      ret = <span class="string">'+'</span> + ret;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可以让代码的层次更加的清晰、易读。<br>还可以用策略模式进一步减少分支判断：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formats = &#123;</span><br><span class="line">  zs: <span class="function"><span class="keyword">function</span>(<span class="params">num, decimal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="string">'.'</span> + <span class="string">'0'</span>.repeat(decimal);</span><br><span class="line">  &#125;,</span><br><span class="line">  xs: <span class="function"><span class="keyword">function</span>(<span class="params">num, decimal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseFloat</span>((num + <span class="string">'0'</span>.repeat(decimal) + <span class="string">'1'</span>)).toFixed(decimal);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params">num, decimal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whichFormat</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> i = <span class="built_in">parseInt</span>(n);</span><br><span class="line">  <span class="keyword">const</span> f = <span class="built_in">parseFloat</span>(n);</span><br><span class="line">  <span class="keyword">if</span> (i == f) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'zs'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; f) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'xs'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'default'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toFixed</span>(<span class="params">num, decimals = <span class="number">2</span>, withSign, isOmitZero</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ret = num;</span><br><span class="line">  <span class="keyword">if</span> (num == <span class="number">0</span> &amp;&amp; num !== <span class="number">0</span> &amp;&amp; num !== <span class="string">'0'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isOmitZero) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'0.00'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">'string'</span> || <span class="keyword">typeof</span> num === <span class="string">'number'</span>) &#123;</span><br><span class="line">    ret = formats[whichFormat(num)](num, decimals);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (withSign &amp;&amp; ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      ret = <span class="string">'+'</span> + ret;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到主要的逻辑实现已经从原方法中进行了拆封，而且该逻辑是可扩展的，原方法中只剩下一些特殊情况的处理逻辑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面是公司项目中的一些可以优化的代码&lt;/p&gt;
&lt;h2 id=&quot;缓存数据&quot;&gt;&lt;a href=&quot;#缓存数据&quot; class=&quot;headerlink&quot; title=&quot;缓存数据&quot;&gt;&lt;/a&gt;缓存数据&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 获取 browser 信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getBrowser&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ua = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.navigator.userAgent || &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isAndroid = &lt;span class=&quot;regexp&quot;&gt;/android/i&lt;/span&gt;.test(ua);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isIos = &lt;span class=&quot;regexp&quot;&gt;/iphone|ipad|ipod/i&lt;/span&gt;.test(ua);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isWechat = &lt;span class=&quot;regexp&quot;&gt;/micromessenger\/([\d.]+)/i&lt;/span&gt;.test(ua);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isWeibo = &lt;span class=&quot;regexp&quot;&gt;/(weibo).*weibo__([\d.]+)/i&lt;/span&gt;.test(ua);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isQQ = &lt;span class=&quot;regexp&quot;&gt;/qq\/([\d.]+)/i&lt;/span&gt;.test(ua);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isQQBrowser = &lt;span class=&quot;regexp&quot;&gt;/(qqbrowser)\/([\d.]+)/i&lt;/span&gt;.test(ua);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isQzone = &lt;span class=&quot;regexp&quot;&gt;/qzone\/.*_qz_([\d.]+)/i&lt;/span&gt;.test(ua);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 安卓 chrome 浏览器，很多 app 都是在 chrome 的 ua 上进行扩展的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isOriginalChrome = &lt;span class=&quot;regexp&quot;&gt;/chrome\/[\d.]+ Mobile Safari\/[\d.]+/i&lt;/span&gt;.test(ua) &amp;amp;&amp;amp; isAndroid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// chrome for ios 和 safari 的区别仅仅是将 Version/&amp;lt;VersionNum&amp;gt; 替换成了 CriOS/&amp;lt;ChromeRevision&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ios 上很多 app 都包含 safari 标识，但它们都是以自己的 app 标识开头，而不是 Mozilla&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isSafari =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /safari\/([\d.]+)$/i.test(ua) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isIos &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ua.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;Crios&quot;&lt;/span&gt;) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ua.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;Mozilla&quot;&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isAndroid,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isIos,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isWechat,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isWeibo,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isQQ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isQQBrowser,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isQzone,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isOriginalChrome,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isSafari&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://tianma630.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>谁动了我的车?</title>
    <link href="http://tianma630.com/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/%E8%B0%81%E5%8A%A8%E4%BA%86%E6%88%91%E7%9A%84%E8%BD%A6/"/>
    <id>http://tianma630.com/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/%E8%B0%81%E5%8A%A8%E4%BA%86%E6%88%91%E7%9A%84%E8%BD%A6/</id>
    <published>2020-07-19T01:26:04.000Z</published>
    <updated>2020-08-01T05:17:33.539Z</updated>
    
    <content type="html"><![CDATA[<p>凌晨五点，夜黑风高，月亮也在乌云的笼罩下似乎没了出头之日，唯有那小区里的路灯还在一眨一眨的闪着幽暗的白光，小道上隐隐约约有个人形在缓缓踱步着，啊，原来是你啊，你穿着一件硕大的罩衫，一条普通的不能再普通的蓝色的牛仔裤，一双白中泛黑的布鞋，你是如此的低调，低调地就好像不存在一样。</p><a id="more"></a><p>十月份杭州的早晨似乎格外的冷，你双手插在上衣口袋，把脑袋埋入帽子中，蜷缩着上半身，不停的打着冷战，心中不停的默念着三字经，以驱使那该死的寒冷。你在此时此地的活动早已不下百次，熟络得如同在自家小院里散步。你不时的用自己闪着红光的双眸环顾着四周，过于经常的夜间活动练就了你一双如猫眼版的火眼金睛，但却也影响了你白天的视力，让你在大白天里抬不起了头。</p><p>“咔。。。嚓。。。”，你似乎听到了什么，迅捷地一后转身，果然如此啊，一单元的门被打开了，你的右嘴角不自觉的向上扬起，眼角早已眯成了一条线，硕大的帽子挡住了你得意的表情，却挡不住你全身散发出来的得意的光芒。不知不觉中，你早已加快了自己的步伐，就在大门关闭的一瞬间，你一个大踏步，伸手奋力向前挡住了大门，如此优美地如击剑般的动作把开门人震住了，他抬头差异的看了你一眼，你也抬起头，把帽子向后一揭，用你的明眸看了他一眼，四目交接，你的嘴角露出了浅浅的微笑，他似乎明白了什么，转身骑上车离开了。你环顾左右，一侧身，就进了楼道。你半蹲着身子，从后裤口袋中掏出了一把小手电，借着手电的微光，你仔细的观察着楼道的角角落落，“***，怎么都是自行车”，一股带着失望的怒气在胸口中游离着，突然，你的双眸被跟前的一辆自行车车架上的几个英文字母吸引住了，看着好眼熟，好像是个不错的牌子吧，既然来了就不能空手回去吧，你用手电仔细看了一遍车上的所，是一把传说中的防液压剪的U型锁，你又扬起了你得意的嘴角，从外套内口袋中掏出了一个小铁皮盒子，从盒子中抽出一条小钢丝，用手对着铁丝头捏了两下，对着锁孔抽插起来，就十几秒的时间，“咔”的一声，锁开了，你迅速拿下锁，把车子退出了楼道，把锁放在了原来停车的位置，你还是没有忘记这一与众不同的习惯。</p><p>你揭开帽子，伸出双手，抬起头，跨上单车，哼着你最爱的水手，向前驶去。。。悠扬的歌声回响在四周，久久不能散去。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;凌晨五点，夜黑风高，月亮也在乌云的笼罩下似乎没了出头之日，唯有那小区里的路灯还在一眨一眨的闪着幽暗的白光，小道上隐隐约约有个人形在缓缓踱步着，啊，原来是你啊，你穿着一件硕大的罩衫，一条普通的不能再普通的蓝色的牛仔裤，一双白中泛黑的布鞋，你是如此的低调，低调地就好像不存在一样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活日记" scheme="http://tianma630.com/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
